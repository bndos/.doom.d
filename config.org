* Appearance
#+BEGIN_SRC emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
(setq mac-command-modifier 'hyper)
(defun my-custom-banner ()
  (let* ((banner
          '(
            ""
            ))
         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat
                 line (make-string (max 0 (- longest-line (length line)))
                                   32)))
               "\n"))
     'face 'doom-dashboard-banner)))


(setq +doom-dashboard-ascii-banner-fn 'my-custom-banner)
(setq +doom-dashboard-functions '(doom-dashboard-widget-banner
                                  doom-dashboard-widget-shortmenu
                                  doom-dashboard-widget-footer))
;; (setq fancy-splash-image (concat doom-private-dir "doom.xpm"))

(setq recentf-menu-filter 'recentf-show-basenames)
(setq display-line-numbers-type nil)
(global-visual-line-mode t)
(setq warning-minimum-level :emergency)

(defun my-dpi ()
  (let* ((attrs (car (display-monitor-attributes-list)))
         (size (assoc 'mm-size attrs))
         (sizex (cadr size))
         (res (cdr (assoc 'geometry attrs)))
         (resx (- (caddr res) (car res)))
         dpi)
    (catch 'exit
      ;; in terminal
      (unless sizex
        (throw 'exit 10))
      ;; on big screen
      (when (> sizex 1000)
        (throw 'exit 10))
      ;; DPI
      (* (/ (float resx) sizex) 25.4))))

(defun my-preferred-font-size ()
  (let ( (dpi (my-dpi)) )
    (cond
     ((< dpi 110) 20)
     ((< dpi 130) 20)
     ((< dpi 160) 20)
     ((< dpi 192) 20)
     ((< dpi 210) 28)
     ((< dpi 240) 29)
     (t 30))))

(defvar my-preferred-font-size (my-preferred-font-size))
;; Color on compile buffer
(require 'ansi-color)
(defun my/ansi-colorize-buffer ()
  (let ((buffer-read-only nil))
    (ansi-color-apply-on-region (point-min) (point-max))))
(add-hook 'compilation-filter-hook 'my/ansi-colorize-buffer)
;; Theme
;; (setq doom-theme 'doom-snazzy)
;; (setq doom-theme 'doom-outrun-electric)
(setq doom-theme 'doom-tokyo-night)
;; (setq doom-theme 'doom-ephemeral)
;; (setq doom-theme 'doom-dracula)
;; (setq doom-theme 'doom-feather-dark)
;; (setq doom-theme 'doom-challenger-deep)
(setq! doom-font (font-spec :family "Comic Mono" :weight 'normal :size my-preferred-font-size)
       doom-variable-pitch-font (font-spec :family "Comic Mono" :weight 'normal :size my-preferred-font-size)
       doom-big-font (font-spec :family "Comic Mono" :weight 'normal :size 50))
(setq! doom-unicode-font (font-spec :family "MesloLGS NF" :weight 'bold))

(set-fontset-font "fontset-default" '(#xf000 . #xf23a) "all-the-icons")


(setq compilation-max-output-line-length nil)
;; set default height and width
(add-to-list 'default-frame-alist '(height . 80))
(add-to-list 'default-frame-alist '(width . 350))

;; (add-to-list 'default-frame-alist
;;              '(font . "Comic Mono-13"))


(add-to-list 'default-frame-alist '(internal-border-width . 20))
(add-to-list 'default-frame-alist '(alpha-background . 93))

(set-frame-parameter (selected-frame) 'alpha-background 0.93)
;; (set-frame-parameter nil 'alpha-background 80)

;; (setq-default header-line-format " ")
;; (set-fringe-mode 10)
;; (setq-default left-fringe-width  10)
;; (setq-default right-fringe-width 10)
(setq doom-themes-enable-bold t
      doom-themes-enable-italic t)

(after! doom-modeline
  (setq doom-modeline-buffer-file-name-style 'file-name)
  (setq-default doom-modeline-height 15)
  (require 'doom-modeline)
  (doom-modeline-def-modeline 'main
    '(eldoc bar workspace-name window-number modals matches follow buffer-info remote-host buffer-position word-count parrot selection-info)
    '(compilation objed-state misc-info persp-name battery grip irc mu4e gnus github debug repl lsp minor-modes input-method indent-info buffer-encoding major-mode process vcs check time "     "))
  )

(custom-set-faces!
  '(default :background "#000000" :foreground "#ffffff")
  ;; '(ivy-minibuffer-match-face-1 :background "#ff79c6" :foreground "#000000")
  ;; '(ivy-minibuffer-match-face-2 :background "#8be9fd" :foreground "#000000")
  ;; '(ivy-minibuffer-match-face-3 :background "#ff79c6" :foreground "#000000")
  ;; '(ivy-minibuffer-match-face-4 :background "#ff79c6" :foreground "#000000")
  ;; '(ivy-minibuffer-match-face-4 :background "#ff79c6" :foreground "#000000")
  '(mc/cursor-bar-face :foreground "#ff79c6")
  '(eglot-highlight-symbol-face :background "#331212" :inherit bold)
  '(lsp-proxy-highlight-symbol-face :background "#331212" :inherit bold)
  '(pulse-highlight-face :background "#331212" :inherit bold)
  '(pulse-highlight-start-face :background "#331212" :inherit bold)
  '(doom-dashboard-banner :foreground "#fafaf3")
  ;; '(tree-sitter-hl-face:type.builtin :inherit 'font-lock-type-face)
  ;; '(tree-sitter-hl-face:type.builtin :foreground "#ffffff")
  '(tree-sitter-hl-face:constant :foreground "#ffffff")
  '(tree-sitter-hl-face:string :foreground "#93b4e3")
  '(lsp-bridge-inlay-hint-face :foreground "#444444")
  '(header-line :background "#000000")
  '(ein:basecell-input-area-face :background "#0f0f0f")
  '(markdown-code-face :inherit default)

  '(magit-header-line :background "#000000" :box nil)
  ;; better ediff colors for dark theme
  '(ediff-current-diff-A :background "#773333")
  '(ediff-current-diff-B :background "#337733")
  '(ediff-current-diff-C :background "#333377")


  '(match :background "#000000")
  '(org-block-begin-line :background "#0f0f0f")
  '(org-block :background "#0f0f0f" )
  '(org-block-end-line :background "#0f0f0f" )
  '(whitespace-tab :background "#000000" )
  '(whitespace-space :background "#000000" )
  '(mode-line-inactive :background "#000000" )
  ;; '(ivy-virtual :foreground "#444444" :italic nil)
  ;; '(ivy-current-match :background "#ff79c6" :foreground "#000000" :inherit bold)
  '(vertico-current :background "#573495")
  '(font-lock-comment-face :foreground "#545577")
  '(font-lock-variable-name-face :foreground "#fe5dee")
  '(font-lock-string-face :foreground "#35a389")
  '(hl-line :background "#272737")
  ;; '(region :background "#355461")
  '(tab-bar-tab :weight bold :foreground "#ff79c6" :background "#000000")
  '(tab-bar-tab-inactive :weight normal :foreground "#ffffff" :background "#000000")
  '(tab-bar :height 1.1 :background "#000000")

  '(lsp-ui-peek-highlight :background "#355461")
  '(lsp-ui-peek-list :background "#000000")
  '(lsp-ui-peek-peek :background "#131318")

  ;; box 2px
  '(mode-line :background "#101010")
  '(mode-line-active :background "#050505")
  '(mode-line-inactive :background "#000000" :box nil)
  '(powerline-active0 :background "#202020")
  '(powerline-active1 :background "#202020")
  '(powerline-active2 :background "#050505")
  '(powerline-inactive0 :background "#000000")
  '(powerline-inactive1 :background "#000000")
  '(powerline-inactive2 :background "#000000")

  '(spaceline-evil-normal :background "#ff79c6" :foreground "#000000")
  '(spaceline-evil-insert :foreground "#000000")
  '(spaceline-evil-emacs :foreground "#000000")
  '(spaceline-evil-visual :background "#8be9fd" :foreground "#000000")

  '(region :background "#3d1212")
  '(xref-match :foreground "#000000" :background "#2b458d")

  '(highlight :background "#ff79c6" :foreground "#000000")

  '(company-tooltip :background "#101010")
  '(company-tooltip-common-selection :background "#ff79c6" :foreground "#000000")
  '(company-tooltip-selection :background "#ff79c6" :foreground "#000000")

  )

(global-set-key (kbd "s-N") 'flash-active-buffer)
(make-face 'flash-active-buffer-face)
(set-face-attribute 'flash-active-buffer-face nil
                    :background "#151515")
(defun flash-active-buffer ()
  (interactive)
  (run-at-time "100 millisec" nil
               (lambda (remap-cookie)
                 (face-remap-remove-relative remap-cookie))
               (face-remap-add-relative 'default 'flash-active-buffer-face)))

(setq window-divider-default-bottom-width 0)

;; (use-package! tree-sitter
;;   :defer t
;;   :config
;;   (require 'tree-sitter-langs)
;;   (global-tree-sitter-mode)
;;   (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

(setq compilation-max-output-line-length nil)
(when (treesit-available-p)
  (add-to-list 'major-mode-remap-alist '(js2-mode . js-ts-mode))
  (add-to-list 'major-mode-remap-alist '(typescript-mode . typescript-ts-mode))
  (add-to-list 'major-mode-remap-alist '(json-mode . json-ts-mode)))

(setq major-mode-remap-alist
      '((bash-mode . bash-ts-mode)
        (js2-mode . js-ts-mode)
        (typescript-mode . typescript-ts-mode)
        (json-mode . json-ts-mode)))

(use-package! treesit-auto
  :custom
  (treesit-auto-install 'prompt)
  )

(use-package! typescript-ts-mode
  :mode (("\\.ts\\'" . typescript-ts-mode)
         ("\\.tsx\\'" . tsx-ts-mode)
         ("\\.jsx\\'" . typescript-ts-mode)
         )

  :config
  (setq typescript-ts-mode-indent-offset 4))


(dolist (hk '(typescript-ts-mode-hook
              tsx-ts-mode-hook
              js-ts-mode-hook
              rjsx-mode-hook
              typescript-mode-hook))
  (add-hook hk (lambda () (when (fboundp 'apheleia-mode) (apheleia-mode 1)))))


(after! treesit
  (setq treesit-language-source-alist
        '((typescript "https://github.com/tree-sitter/tree-sitter-typescript" "v0.20.3" "typescript/src")
          (haskell "https://github.com/tree-sitter/tree-sitter-haskell")
          (agda "https://github.com/tree-sitter/tree-sitter-agda")
          (go "https://github.com/tree-sitter/tree-sitter-go")
          (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src" nil nil))))
#+END_SRC

* evil
#+BEGIN_SRC emacs-lisp
;; evil
(setq evil-insert-state-map (make-sparse-keymap))
(define-key evil-insert-state-map (kbd "<escape>") 'evil-normal-state)

(defun my-evilem-motion-previous-line ()
  (interactive)
  (better-jumper-set-jump)
  (evilem-motion-previous-line))

(defun my-evilem-motion-next-line ()
  (interactive)
  (better-jumper-set-jump)
  (evilem-motion-next-line))

(map! :n "g s k" 'my-evilem-motion-previous-line
      :n "g s j" 'my-evilem-motion-next-line)
#+END_SRC

* consult
#+BEGIN_SRC emacs-lisp
;; consult
(setq consult-fontify-max-size 1024)
#+END_SRC

* lsp/flymake
#+BEGIN_SRC emacs-lisp
(use-package! breadcrumb
  :ensure t
  :config
  (breadcrumb-mode t))

(after! company
  (setq company-idle-delay 0)
  ;; If you encounter issues when typing Vue directives (e.g., v-), you can try setting it to 1. I'm not sure if it's a problem with Volar.
  (setq company-minimum-prefix-length 2)
  (setq company-tooltip-idle-delay 0)
  )

(use-package dape
  :preface
  ;; By default dape shares the same keybinding prefix as `gud'
  ;; If you do not want to use any prefix, set it to nil.
  ;; (setq dape-key-prefix "\C-x\C-a")

  :hook
  ;; Save breakpoints on quit
  (kill-emacs . dape-breakpoint-save)
  ;; Load breakpoints on startup
  (after-init . dape-breakpoint-load)

  :config
  ;; Turn on global bindings for setting breakpoints with mouse
  (setq treesit-go-tests-query (treesit-query-compile 'go
                                                      '((function_declaration
                                                         name: (identifier) @testname
                                                         parameters: (parameter_list :anchor (parameter_declaration type: (pointer_type) @type :anchor))
                                                         (:match "*testing.\\(T\\|M\\)" @type) (:match "^Test.+$" @testname)) @parent)))
  (defun jake/query-go-test-nodes ()
    (when (treesit-ready-p 'go)
      (treesit-query-capture (treesit-buffer-root-node) treesit-go-tests-query)))

  (defun jake/completing-read-go-tests ()
    (let* ((test-matches (jake/query-go-test-nodes))
           (test-name-matches (cl-remove-if-not (lambda (match) (eq (car match) 'testname)) test-matches))
           (test-names (mapcar (lambda (match) (treesit-node-text (cdr match))) test-name-matches)))
      (completing-read "Test:" test-names nil t)))


  (defun jake/dape--select-go-test-args ()
    (when-let* ((test-name (jake/completing-read-go-tests))
                (test-regexp (concat "^" test-name "$")))
      (if test-name
          `["-test.run" ,test-regexp]
        (error "No test selected"))))

  (defun jake/file-relative-dir ()
    "Return the file directory relative to dape's cwd. This is used by Delve debugger."
    (concat "./" (file-relative-name default-directory (funcall dape-cwd-fn))))

  ;; inside your dape-config
  (add-to-list 'dape-configs
               `(go-test
                 modes (go-mode go-ts-mode)
                 command "dlv"
                 command-cwd dape-cwd-fn
                 command-args ("dap" "--listen" "127.0.0.1:55878")
                 host "127.0.0.1"
                 port 55878
                 :type "go"
                 :name "debug test"
                 :request "launch"
                 :mode "test"
                 :cwd dape-cwd-fn
                 :program jake/file-relative-dir))
  (dape-breakpoint-global-mode)
  (setq dape-request-timeout 60)

  ;; Info buffers to the right
  ;; (setq dape-buffer-window-arrangement 'right)

  ;; Info buffers like gud (gdb-mi)
  (setq dape-buffer-window-arrangement 'gud)
  (setq dape-info-hide-mode-line nil)

  ;; Pulse source line (performance hit)
  (add-hook 'dape-display-source-hook 'pulse-momentary-highlight-one-line)

  ;; Showing inlay hints
  (setq dape-inlay-hints t)

  ;; Save buffers on startup, useful for interpreted languages
  (add-hook 'dape-start-hook (lambda () (save-some-buffers t t)))

  ;; Kill compile buffer on build success
  ;; (add-hook 'dape-compile-hook 'kill-buffer)

  ;; Projectile users
  (setq dape-cwd-function 'projectile-project-root)


  ;; Inject envrc env or process environment to debugger
  (defun my-envrc->plist ()
    "Return envrc environment as a plist with keyword keys.
Falls back to `process-environment` if envrc export fails."
    (let* ((raw-env
            (cond
             ((fboundp 'envrc--export)
              (cdr (ignore-errors (envrc--export (projectile-project-root)))))
             (t nil)))
           (env-source (or raw-env
                           (mapcar (lambda (s)
                                     (let ((split (split-string s "=" t)))
                                       (cons (car split) (mapconcat #'identity (cdr split) "="))))
                                   process-environment))))
      (seq-mapcat
       (lambda (pair)
         (let ((key (car pair))
               (val (cdr pair)))
           (when (and (stringp key) (stringp val))
             (list (intern (concat ":" key)) val))))
       env-source)))

  (defun my-dape-inject-envrc (orig-fn config &rest args)
    (let* ((envrc-env (my-envrc->plist))
           (merged-env (append envrc-env (plist-get config :env)))
           (new-config (plist-put config :env merged-env)))
      (apply orig-fn new-config args)))

  (advice-add 'dape :around #'my-dape-inject-envrc))

;; Enable repeat mode for more ergonomic `dape' use
(use-package repeat
  :config
  ;; (repeat-mode)
  ;; only on dape-mode
  (add-hook 'dape-mode-hook #'repeat-mode)
  )

(use-package! flycheck
  :config
  (map! :leader "[" #'flycheck-previous-error)
  (map! :leader "]" #'flycheck-next-error)
  ;; (setq flymake-start-on-flymake-mode t)
  ;; (setq flymake-no-changes-timeout nil)
  )

(use-package lsp-proxy
  ;; :load-path "/path/to/lsp-proxy"
  :config
  (setq lsp-proxy-user-languages-config
        (expand-file-name "~/.config/doom/languages.toml"))

  (setq lsp-proxy-diagnostics-provider :flycheck)
  (add-hook 'lsp-proxy-mode-hook
            (lambda ()
              (setq-local flycheck-checker 'lsp-proxy)))
  (add-hook! '(
               tsx-ts-mode-hook
               js-ts-mode-hook
               typescript-mode-hook
               typescript-ts-mode-hook
               rjsx-mode-hook
               less-css-mode-hook
               web-mode-hook
               go-mode-hook
               ;; python-mode-hook
               rust-mode-hook
               c-mode-hook
               c++-mode-hook
               ) #'lsp-proxy-mode))

(defun my-lsp-find-definition ()
  "Go to definition with either lsp-proxy or Eglot, setting a jump point."
  (interactive)
  (better-jumper-set-jump)
  (cond
   ((bound-and-true-p lsp-proxy-mode)
    (lsp-proxy-find-definition))
   ((bound-and-true-p eglot--managed-mode)
    (xref-find-definitions (thing-at-point 'symbol)))
   (t
    (call-interactively '+lookup/definition))))

(defun my-lsp-find-declaration ()
  "Go to declaration with either lsp-proxy or Eglot, setting a jump point."
  (interactive)
  (better-jumper-set-jump)
  (cond
   ((bound-and-true-p lsp-proxy-mode)
    (call-interactively 'lsp-proxy-find-declaration))
   ((bound-and-true-p eglot--managed-mode)
    (call-interactively 'eglot-find-declaration))
   (t
    (message "No LSP backend active in this buffer."))))

(defun my-lsp-find-references ()
  "Find references with either lsp-proxy or Eglot, setting a jump point."
  (interactive)
  (better-jumper-set-jump)
  (cond
   ((bound-and-true-p lsp-proxy-mode)
    (call-interactively 'lsp-proxy-find-references))
   ((bound-and-true-p eglot--managed-mode)
    (call-interactively 'xref-find-references))
   (t
    (call-interactively '+lookup/references))))

(defun my-lsp-find-implementations ()
  "Find implementations with either lsp-proxy or Eglot, setting a jump point."
  (interactive)
  (better-jumper-set-jump)
  (cond
   ((bound-and-true-p lsp-proxy-mode)
    (call-interactively 'lsp-proxy-find-implementations))
   ((bound-and-true-p eglot--managed-mode)
    (call-interactively 'eglot-find-implementation))
   (t
    (message "No LSP backend active in this buffer."))))

(defun my-lsp-rename ()
  "Find implementations with either lsp-proxy or Eglot, setting a jump point."
  (interactive)
  (better-jumper-set-jump)
  (cond
   ((bound-and-true-p lsp-proxy-mode)
    (call-interactively 'lsp-proxy-rename))
   ((bound-and-true-p eglot--managed-mode)
    (call-interactively 'eglot-rename))
   (t
    (message "No LSP backend active in this buffer."))))

(defun my-lsp-code-actions ()
  "Run code actions with either lsp-proxy or Eglot, setting a jump point.
If there is a region, use it for the code actions; otherwise use point."
  (interactive)
  (better-jumper-set-jump)
  (cond
   ((bound-and-true-p lsp-proxy-mode)
    (call-interactively 'lsp-proxy-execute-code-action))
   ((bound-and-true-p eglot--managed-mode)
    (call-interactively 'eglot-code-actions))
   (t
    (message "No LSP backend active in this buffer."))))

(defun my-lsp-rename ()
  "Rename symbol with either lsp-proxy or Eglot."
  (interactive)
  (cond
   ((bound-and-true-p lsp-proxy-mode)
    (call-interactively 'lsp-proxy-rename))
   ((bound-and-true-p eglot--managed-mode)
    (call-interactively 'eglot-rename))
   (t
    (message "No LSP backend active in this buffer."))))

(defun my-lsp-describe-thing-at-point ()
  "Describe symbol at point with either lsp-proxy or Eglot."
  (interactive)
  (cond
   ((bound-and-true-p lsp-proxy-mode)
    (lsp-proxy-describe-thing-at-point))
   ((bound-and-true-p eglot--managed-mode)
    (eglot-describe-thing-at-point))
   (t
    (message "No LSP backend active in this buffer."))))

(defun my-lsp-show-project-diagnostics ()
  "Show project diagnostics with either lsp-proxy or Eglot."
  (interactive)
  (cond
   ((bound-and-true-p lsp-proxy-mode)
    (lsp-proxy-show-project-diagnostics))
   ;; Eglot’s “show-project-diagnostics” function may need an update or
   ;; is commented out in your config. Uncomment if you want it:
   ((fboundp 'eglot-show-project-diagnostics)
    (eglot-show-project-diagnostics))
   (t
    (message "No LSP backend active in this buffer, or Eglot has no diagnostics function."))))

;; ---------------------------------------
;; GLOBAL KEYBINDINGS (use only once)
;; ---------------------------------------
;; Normal mode 'g' keys:
(map! :n "g d" #'my-lsp-find-definition
      :n "g D" #'my-lsp-find-declaration
      :n "g r" #'my-lsp-find-references
      :n "g i" #'my-lsp-find-implementations)

(map! :leader
      "c r" #'my-lsp-rename
      "c a" #'my-lsp-code-actions
      "c d" #'my-lsp-describe-thing-at-point
      "c r" #'my-lsp-rename
      "c x" #'my-lsp-show-project-diagnostics)
#+END_SRC

* ruff
#+BEGIN_SRC emacs-lisp
;; ruff
(use-package lazy-ruff
  :defer t
  :hook (python-mode . lazy-ruff-mode)
  :config
  (after! python
    (map! :map python-mode-map
          "C-c f" 'lazy-ruff-lint-format-buffer)
    )
  (defun lazy-ruff-lint-format-buffer ()
    "Format the current Python buffer using ruff before saving."
    (interactive)
    (unless (derived-mode-p 'python-mode 'python-base-mode)
      (user-error "Only python buffers can be linted with ruff"))
    (let ((temp-file (make-temp-file "ruff-tmp" nil ".py")))
      ;; Write buffer to temporary file, format it, and replace buffer contents.
      (write-region nil nil temp-file)
      (lazy-ruff-run-commands temp-file
                              (eq lazy-ruff-only-format-buffer t)
                              (eq lazy-ruff-only-check-buffer t))

      (let ((tmp-buf (generate-new-buffer " *temp*")))
        (with-current-buffer tmp-buf (insert-file-contents temp-file))
        (replace-buffer-contents tmp-buf)
        (kill-buffer tmp-buf))
      ;; Clean up temporary file.
      (delete-file temp-file)
      )
    )
  )
#+END_SRC

* dart
#+BEGIN_SRC emacs-lisp
;; dart
(use-package! dart-mode
  :defer t
  :bind (:map dart-mode-map
              ("C-M-x" . #'flutter-run-or-hot-reload))
  :config
  (setq lsp-dart-flutter-widget-guides nil))
#+END_SRC

* go-mode
#+BEGIN_SRC emacs-lisp
;; go-mode
(after! go-mode
  (setq gofmt-command "gofumpt")
  (add-hook 'before-save-hook 'gofmt-before-save))
#+END_SRC

* company
#+BEGIN_SRC emacs-lisp
;; company
;; (after! company
;;   (setq company-idle-delay 0.05)
;;   (setq company-minimum-prefix-length 2)
;;   (define-key company-mode-map (kbd "H-SPC") 'company-complete)
;;   (define-key company-active-map (kbd "<backtab>") 'counsel-company))
#+END_SRC

* treemacs
#+BEGIN_SRC emacs-lisp
;; treemacs
(after! treemacs
  (treemacs-project-follow-mode 1)
  (treemacs-follow-mode 1)
  ;; (treemacs-tag-follow-mode 1)
  (map! :leader "o s" #'lsp-treemacs-symbols)
  (setq treemacs-is-never-other-window nil)
  (setq treemacs-width-is-initially-locked  nil)
  )
;; lsp-treemacs
#+END_SRC

* cc/cuda
#+BEGIN_SRC emacs-lisp
;; cuda-mode is c++ mode
(add-to-list 'auto-mode-alist '("\\.cu\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.cuh\\'" . c++-mode))
#+END_SRC

* meson-mode
#+BEGIN_SRC emacs-lisp
;; meson-mode
(use-package! meson-mode
  :defer t
  :mode "\\.build\\'"
  )
#+END_SRC

* smartparens
#+BEGIN_SRC emacs-lisp
;; smartparens
(after! smartparens
  (define-key smartparens-mode-map (kbd "M-<backspace>") 'sp-backward-unwrap-sexp))
#+END_SRC

* multiple cursors
#+BEGIN_SRC emacs-lisp
;; multiple-cursors
(blink-cursor-mode 1)
(use-package! multiple-cursors
  :defer t
  :bind
  (("H-."  . 'mc/mark-next-like-this)
   ("H-,"  . 'mc/mark-previous-like-this)
   ("C-\"" . 'mc/mark-all-like-this)
   ("H->"     . 'mc/skip-to-next-like-this)
   ("H-<"     . 'mc/skip-to-previous-like-this)

   :map mc/keymap
   ("H-x C-." . 'mc/unmark-next-like-this)
   ("H-x C-," . 'mc/unmark-previous-like-this)
   ("H-x C-:" . 'mc/mark-pop)
   ("M-["     . 'mc/insert-numbers)
   ("M-]"     . 'mc/insert-letters)
   ("C-x C-a" . 'mc/vertical-align-with-space)))
#+END_SRC

* buffermove
#+BEGIN_SRC emacs-lisp
;; buffermove
(use-package! buffer-move
  :bind (("H-K" . buf-move-up)
         ("H-J" . buf-move-down)
         ("H-H" . buf-move-left)
         ("H-L" . buf-move-right)))
#+END_SRC

* dired
#+BEGIN_SRC emacs-lisp
;; dired
(defun my--linux-opener-and-args (path)
  "Return (prog . args) to open PATH on Linux."
  (cond
   ((executable-find "xdg-open") (cons "xdg-open" (list path)))
   ((and (executable-find "gio")) (cons "gio" (list "open" path)))
   ((executable-find "gnome-open") (cons "gnome-open" (list path)))
   ((executable-find "kde-open5") (cons "kde-open5" (list path)))
   ((executable-find "kde-open") (cons "kde-open" (list path)))
   (t (error "No opener found (tried xdg-open/gio/gnome-open/kde-open)"))))

(defun my-open-external (path)
  "Open PATH with the OS default application."
  (interactive "fOpen externally: ")
  (pcase system-type
    ('darwin (start-process "open-file" nil "open" path))
    ('windows-nt
     (if (fboundp 'w32-shell-execute)
         (w32-shell-execute "open" (convert-standard-filename path))
       (start-process "open-file" nil "cmd.exe" "/C" "start" "" (convert-standard-filename path))))
    ('gnu/linux
     (cl-destructuring-bind (prog . args) (my--linux-opener-and-args path)
       (apply #'start-process "open-file" nil prog args)))
    (_ (error "Unsupported system-type: %s" system-type))))

(defun my-open-file-manager-here (&optional dir)
  "Open the platform file manager at DIR (or `default-directory')."
  (interactive)
  (let ((dir (file-name-as-directory (or dir default-directory))))
    (pcase system-type
      ('darwin (start-process "open-fm" nil "open" "-a" "Finder" dir))
      ('windows-nt
       (if (fboundp 'w32-shell-execute)
           (w32-shell-execute "explore" (convert-standard-filename dir))
         (start-process "open-fm" nil "explorer.exe" (convert-standard-filename dir))))
      ('gnu/linux
       (let ((fm (seq-find #'executable-find
                           '("nautilus" "nemo" "dolphin" "thunar" "pcmanfm" "krusader"))))
         (if fm
             (start-process "open-fm" nil fm dir)
           ;; fallback to generic opener
           (cl-destructuring-bind (prog . args) (my--linux-opener-and-args dir)
             (apply #'start-process "open-fm" nil prog args)))))
      (_ (error "Unsupported system-type: %s" system-type)))))

(map! "C-c C-n" #'my-open-file-manager-here)

;;; Dired integration
(after! dired-x
  (defun dired-open-in-external-app ()
    "Open marked files in their default external app."
    (interactive)
    (let ((files (dired-get-marked-files)))
      (dolist (f files)
        (my-open-external f)
        (message "Opening: %s" f))))
  (define-key dired-mode-map (kbd "M-o") #'dired-open-in-external-app))

(after! dirvish
  (setq dirvish-hide-details t)
  (setq dirvish-side-window-parameters
        '((no-delete-other-windows . t)))
  )
#+END_SRC

* vertico
#+BEGIN_SRC emacs-lisp
;; vertico
(after! verticoo
  (setq vertico-cycle nil)
  (marginalia-mode)
  )
#+END_SRC

* copilot
#+BEGIN_SRC emacs-lisp
;; copilot
(defun my-tab ()
  (interactive)
  (or (copilot-accept-completion)
      (company-indent-or-complete-common nil)))

(use-package! copilot
  :hook
  ;; (org-mode . my/copilot-activate-after-eglot)
  ;; (prog-mode . my/copilot-activate-after-eglot)
  (prog-mode . copilot-mode)
  (org-mode . copilot-mode)
  :bind (("S-<tab>" . 'copilot-accept-completion-by-word)
         ("S-<return>" . 'copilot-accept-completion)
         :map copilot-completion-map
         ("M-n" . 'copilot-next-completion)
         ("M-p" . 'copilot-previous-completion)
         ;; ("TAB" . 'my-tab)
         ("TAB" . 'copilot-accept-completion)
         ("S-<return>" . 'copilot-accept-completion)
         ("C-<tab>" . 'copilot-accept-completion-by-word)
         ("H-<tab>" . 'copilot-accept-completion-by-line)
         )
  (:map copilot-mode-map
        ("S-<tab>" . 'copilot-accept-completion-by-word)
        )
  :config
  (defun my/copilot-activate-after-eglot ()
    "Activate copilot-mode after eglot is initialized."
    (run-at-time "2 sec" nil #'copilot-mode)))
    #+END_SRC

* gptel
#+BEGIN_SRC emacs-lisp
;; gptel

(use-package! gptel
 :defer t
 :config
 (global-set-key (kbd "C-c c g") 'gptel-menu)
 (global-set-key (kbd "C-c c c") 'gptel)
 (require 'auth-source-pass)
 (auth-source-pass-enable)
 (setq gptel-default-mode 'org-mode))
#+END_SRC

* magit
#+BEGIN_SRC emacs-lisp
(after! magit
  (setq transient-display-buffer-action '(display-buffer-in-side-window (side . bottom))))
#+END_SRC

* window-rules
#+BEGIN_SRC emacs-lisp
;; window-rules

(setq switch-to-buffer-obey-display-actions t)
(setq-default switch-to-buffer-in-dedicated-window 'pop)

(setq
 display-buffer-alist
 `(
   ("\\*Buffer List\\*"
    (display-buffer-reuse-window display-buffer-in-side-window)
    (side . top) (slot . 1) (preserve-size . (nil . t)) (window-height . 0.15) (dedicated . t))

   ("\\*\\(?:Tag List\\)\\*\\|^*julia" display-buffer-in-side-window
    (side . right) (slot . 0) (window-width . 0.2) (dedicated . t)
    (preserve-size . (t . nil)))

   ("^\\*magit:\\|^magit-diff" display-buffer-in-side-window
    (side . left) (slot . 3) (window-width . 0.2) (dedicated . t)
    (preserve-size . (t . nil)))

   ("COMMIT_EDITMSG" display-buffer-in-side-window
    (side . left) (slot . 2) (window-width . 0.2) (dedicated . t)
    (preserve-size . (t . nil)))
   ("\\*\\(?:help\\|grep\\|Completions\\|org-python-session\\|Python\\)\\*\\|^*leetcode\\|^*compilation\\|^*Flutter\\|^*pytest\\|^*docker-build-output\\|^*ein\\|^*MATLAB\\|^* docker container" display-buffer-in-side-window
    (side . top) (slot . 4) (preserve-size . (t . nil)) (window-height . 0.15) (dedicated . t))

   ("\\*\\(?:shell\\|vterm\\)\\*" display-buffer-in-side-window
    (side . top) (slot . 5) (preserve-size . (nil . t)) (window-height . 0.15) (dedicated . t))

   )
 )

(map! :leader "w x" #'window-toggle-side-windows)

(add-hook 'ediff-before-setup-hook (lambda () (select-frame (make-frame))))
#+END_SRC

* vterm
#+BEGIN_SRC emacs-lisp
;; vterm
(defun projectile-vterm ()
  (interactive)
  ;; (if (projectile-project-p)
  ;; if projectile-project-p is not nil and not dired-mode
  (if (and (projectile-project-p) (not (eq major-mode 'dired-mode)))
      (let* ((project (projectile-project-root)))
        (unless (require 'vterm nil 'noerror)
          (error "Package 'vterm' is not available"))
        (projectile-with-default-dir project
          (vterm "*vterm*")))
    (unless (require 'vterm nil 'noerror)
      (error "Package 'vterm' is not available"))
    (vterm "*vterm*")))

(map! "M-V" #'projectile-vterm)

(use-package! vterm
  :init
  (setq vterm-shell "zsh")
  (setq vterm-buffer-name-string "*vterm %s*"))
#+END_SRC

* org
#+BEGIN_SRC emacs-lisp
;; org

(use-package! engrave-faces-latex
  :after ox-latex
  :config
  (add-to-list 'org-latex-engraved-options '("linenos" "true")))

(after! org
  (map! :map org-mode-map :n "g k" #'org-up-element)
  (map! :map org-mode-map :n "g j" #'org-down-element)
  (map! :map org-mode-map :leader "j s" 'jupyter-org-insert-src-block)
  (map! :map org-mode-map :leader "j c" 'jupyter-org-clone-block)

  (setq org-latex-src-block-backend 'engraved)

  (setq org-agenda-files '("~/Dropbox/agenda.org"))
  (setq org-latex-hyperref-template nil)
  (setq org-startup-with-latex-preview t)
  ;; (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-toc-command "\\tableofcontents \\clearpage")


  ;; (setq org-latex-listings 'minted)
  ;; (setq org-latex-minted-options
  ;;       '(("breaklines" "true")
  ;;         ("breakanywhere" "true")
  ;;         ("linenos" "true")
  ;;         ("gobble" "-8")
  ;;         ("xleftmargin" "10pt")
  ;;         ("bgcolor" "borlandbg")))

  ;; (setq org-latex-pdf-process '("latexmk -pdflatex=xelatex -shell-escape -pdf %f"))
  ;; (setq org-latex-pdf-process '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  ;; (setq org-latex-pdf-process '("xetex -shell-escape -interaction nonstopmode %f"))


  (after! ox-latex
    (add-to-list 'org-latex-classes
                 '("extarticle"
                   "\\documentclass{extarticle}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

  (use-package! org-ref
    :commands
    (org-ref-cite-hydra/body
     org-ref-bibtex-hydra/body)
    )
  (require 'org-ref)
  (setq org-src-fontify-natively t)
  )

(setq org-journal-date-format "%a, %Y %b %d")

;; make org-roam directory ~/Dropbox/org-roam
(setq org-roam-directory "~/Dropbox/org-roam")
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (jupyter . t)))

(use-package! olivetti
  :defer t
  :hook
  (org-mode . olivetti-mode)
  (markdown-mode . olivetti-mode)
  :config
  (setq olivetti-body-width 170)
  )

#+END_SRC

* custom conf
#+BEGIN_SRC emacs-lisp
;; custom binds
(setq delete-by-moving-to-trash t)
(setq-default comment-line-break-function nil)

(global-set-key (kbd "H-M-J") (lambda()
                              (interactive)
                              (display-buffer-in-side-window (get-buffer (buffer-name)) '((side . top) (slot . -1) (window-height . 0.15)))))
(global-set-key (kbd "H-M-K") (lambda()
                              (interactive)
                              (display-buffer-in-side-window (get-buffer (buffer-name)) '((side . top) (slot . 1) (window-height . 0.15)))))
(global-set-key (kbd "H-M-L") (lambda()
                              (interactive)
                              (display-buffer-in-side-window (get-buffer (buffer-name)) '((side . right) (slot . 1) (window-width . 0.35)))))
(global-set-key (kbd "H-M-H") (lambda()
                              (interactive)
                              (display-buffer-in-side-window (get-buffer (buffer-name)) '((side . left) (slot . 1) (window-width . 0.2)))))

(defun open-term ()
  "Lists the contents of the current directory."
  (interactive)
  (call-process "kitty" nil 0 nil))

(defun open-terminal-in-project-root ()
  "Open default terminal in the project root."
  (interactive)
  (if (projectile-project-p)
      (let ((default-directory (projectile-project-root)))
        (open-term))
    (open-term)))
(map! "H-<return>" 'open-terminal-in-project-root)

(map! :i
      "C-?" #'undo-fu-only-redo)

(map! :i
      "C-M-/" #'undo-fu-only-redo-all)

(global-set-key (kbd "H-d") (lambda ()
                              (interactive)
                              (scroll-up 4)
                              (setq this-command 'next-line)
                              (forward-line 4)))
(global-set-key (kbd "H-u") (lambda ()
                              (interactive)
                              (scroll-down 4)
                              (setq this-command 'previous-line)
                              (forward-line -4)))

(defun switch-to-previous-buffer ()
  (interactive)
  (switch-to-buffer (other-buffer)))
(global-set-key (kbd "H-<tab>") 'switch-to-previous-buffer)

(defun my-make-room-for-new-compilation-buffer ()
  "Renames existing *compilation* buffer to something unique so
         that a new compilation job can be run."
  (interactive)
  (let ((cbuf (get-buffer (concat "*compilation*<" (projectile-project-name) ">")))
        (more-cbufs t)
        (n 1)
        (new-cbuf-name ""))
    (when cbuf
      (while more-cbufs
        (setq new-cbuf-name (concat (format "*compilation %d*<" n) compile-command " " (projectile-project-name) ">"))
        (setq n (1+ n))
        (setq more-cbufs (get-buffer new-cbuf-name)))
      (with-current-buffer cbuf
        (rename-buffer new-cbuf-name)))))

(map! :leader "c n" #'my-make-room-for-new-compilation-buffer)

(setq bookmark-default-file "~/.config/doom/bookmarks")
#+END_SRC

* remapping
#+BEGIN_SRC emacs-lisp
;; remaping
(use-package! xclip
  :config
  (xclip-mode 1)
  )

;; windows
(global-set-key (kbd "H-h") 'windmove-left)
(global-set-key (kbd "H-l") 'windmove-right)
(global-set-key (kbd "H-k") 'windmove-up)
(global-set-key (kbd "H-j") 'windmove-down)

(global-set-key (kbd "H-M-h") '(lambda () (interactive) (shrink-window-horizontally 10)))
(global-set-key (kbd "H-M-l") '(lambda () (interactive) (enlarge-window-horizontally 10)))
(global-set-key (kbd "H-M-j") '(lambda () (interactive) (shrink-window 10)))
(global-set-key (kbd "H-M-k") '(lambda () (interactive) (enlarge-window 10)))

(global-set-key (kbd "H-/") 'winner-undo)
(global-set-key (kbd "H-?") 'winner-redo)

(map! :leader "w <" '(lambda () (interactive) (shrink-window-horizontally 10)))
(map! :leader "w >" '(lambda () (interactive) (enlarge-window-horizontally 10)))
(map! :leader "w +" '(lambda () (interactive) (enlarge-window 10)))
(map! :leader "w -" '(lambda () (interactive) (shrink-window 10)))

;; Pull from PRIMARY (same as middle mouse click)
(defun get-primary ()
  (interactive)
  (insert
   (gui-get-primary-selection)))

(map! :v "+y" 'clipboard-kill-ring-save)
(map! :n "*p" 'get-primary)
(map! :n "." #'evil-repeat)

;; open file externally
(map! :leader "f o" #'counsel-find-file-extern)

(map! :leader "f ." #'find-name-dired)

;; workspaces
(map! :leader "TAB TAB" #'+workspace/other)
(map! :leader "TAB '" #'+workspace/display)

;; tangling
(map! :leader "m b t" #'org-babel-tangle)
(map! :leader "m b T" #'org-babel-tangle-file)
(map! :leader "m b d" #'org-babel-detangle)
#+END_SRC
