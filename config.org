* Appearance
#+BEGIN_SRC emacs-lisp
(defun my-custom-banner ()
  (let* ((banner
          '(
            ""
            ))
         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat
                 line (make-string (max 0 (- longest-line (length line)))
                                   32)))
               "\n"))
     'face 'doom-dashboard-banner)))


(setq +doom-dashboard-ascii-banner-fn 'my-custom-banner)
(setq +doom-dashboard-functions '(doom-dashboard-widget-banner
                                  doom-dashboard-widget-shortmenu
                                  doom-dashboard-widget-footer))
;; (setq fancy-splash-image (concat doom-private-dir "doom.xpm"))

(setq recentf-menu-filter 'recentf-show-basenames)
(setq display-line-numbers-type nil)
(global-visual-line-mode t)
(setq warning-minimum-level :emergency)

;; Color on compile buffer
(require 'ansi-color)
(defun my/ansi-colorize-buffer ()
  (let ((buffer-read-only nil))
    (ansi-color-apply-on-region (point-min) (point-max))))
(add-hook 'compilation-filter-hook 'my/ansi-colorize-buffer)
;; Theme
;; (setq doom-theme 'doom-snazzy)
;; (setq doom-theme 'doom-outrun-electric)
(setq doom-theme 'doom-ephemeral)
;; (setq doom-theme 'doom-dracula)
;; (setq doom-theme 'doom-challenger-deep)
(setq! doom-font (font-spec :family "Comic Mono" :weight 'normal :size 24)
       doom-variable-pitch-font (font-spec :family "Comic Mono" :weight 'normal :size 24)
       doom-big-font (font-spec :family "Comic Mono" :weight 'normal :size 50))
(setq! doom-unicode-font (font-spec :family "MesloLGS NF" :weight 'normal))

(set-fontset-font "fontset-default" '(#xf000 . #xf23a) "all-the-icons")

;; set default height and width
(add-to-list 'default-frame-alist '(height . 55))
(add-to-list 'default-frame-alist '(width . 130))

(add-to-list 'default-frame-alist
             '(font . "Comic Mono-14"))


(add-to-list 'default-frame-alist '(internal-border-width . 10))
(add-to-list 'default-frame-alist '(alpha-background . 85))

(set-frame-parameter (selected-frame) 'alpha-background 0.85)
;; (set-frame-parameter nil 'alpha-background 80)

;; (setq-default header-line-format " ")
(set-fringe-mode 35)
(setq-default left-fringe-width  35)
(setq-default right-fringe-width 35)
(setq doom-themes-enable-bold t
      doom-themes-enable-italic t)

(after! doom-modeline
  (setq doom-modeline-buffer-file-name-style 'file-name)
  (setq-default doom-modeline-height 45)
  (require 'doom-modeline)
  (doom-modeline-def-modeline 'main
    '(eldoc bar workspace-name window-number modals matches follow buffer-info remote-host buffer-position word-count parrot selection-info)
    '(compilation objed-state misc-info persp-name battery grip irc mu4e gnus github debug repl lsp minor-modes input-method indent-info buffer-encoding major-mode process vcs check time "     "))
  )

(use-package pdf-view
  :hook (pdf-tools-enabled . pdf-view-midnight-minor-mode)
  :config
  (setq pdf-view-midnight-colors '("#FFFFFF" . "#000000")))

(custom-set-faces!
  '(default :background "#000000" :foreground "#ffffff")
  ;; '(ivy-minibuffer-match-face-1 :background "#ff79c6" :foreground "#000000")
  ;; '(ivy-minibuffer-match-face-2 :background "#8be9fd" :foreground "#000000")
  ;; '(ivy-minibuffer-match-face-3 :background "#ff79c6" :foreground "#000000")
  ;; '(ivy-minibuffer-match-face-4 :background "#ff79c6" :foreground "#000000")
  ;; '(ivy-minibuffer-match-face-4 :background "#ff79c6" :foreground "#000000")
  '(mc/cursor-bar-face :foreground "#ff79c6")
  '(eglot-highlight-symbol-face :background "#331212" :inherit bold)
  '(doom-dashboard-banner :foreground "#fafaf3")
  ;; '(tree-sitter-hl-face:type.builtin :inherit 'font-lock-type-face)
  ;; '(tree-sitter-hl-face:string :foreground "#434493")
  '(header-line :background "#000000")
  '(ein:basecell-input-area-face :background "#0f0f0f")
  '(markdown-code-face :inherit default)

  '(magit-header-line :background "#000000"  :box nil)
  ;; better ediff colors for dark theme
  '(ediff-current-diff-A :background "#773333")
  '(ediff-current-diff-B :background "#337733")
  '(ediff-current-diff-C :background "#333377")


  '(match :background "#000000")
  '(org-block-begin-line :background "#0f0f0f")
  '(org-block :background "#0f0f0f" )
  '(org-block-end-line :background "#0f0f0f" )
  '(whitespace-tab :background "#000000" )
  '(whitespace-space :background "#000000" )
  '(mode-line :background "#101010")
  '(mode-line-inactive :background "#000000" )
  ;; '(ivy-virtual :foreground "#444444" :italic nil)
  ;; '(ivy-current-match :background "#ff79c6" :foreground "#000000" :inherit bold)
  '(vertico-current :background "#270f25")
  '(font-lock-comment-face :foreground "#545577")
  '(font-lock-variable-name-face :foreground "#f22d88")
  '(hl-line :background "#171717")
  ;; '(region :background "#355461")
  '(lsp-ui-peek-highlight :background "#355461")
  '(lsp-ui-peek-list :background "#000000")
  '(lsp-ui-peek-peek :background "#131318")

  '(mode-line :background "#101010" :box nil)
  '(mode-line-active :background "#050505")
  '(mode-line-inactive :background "#000000"  :box nil)
  '(powerline-active0 :background "#202020")
  '(powerline-active1 :background "#202020")
  '(powerline-active2 :background "#050505")
  '(powerline-inactive0 :background "#000000")
  '(powerline-inactive1 :background "#000000")
  '(powerline-inactive2 :background "#000000")

  '(spaceline-evil-normal :background "#ff79c6" :foreground "#000000")
  '(spaceline-evil-insert :foreground "#000000")
  '(spaceline-evil-emacs :foreground "#000000")
  '(spaceline-evil-visual :background "#8be9fd" :foreground "#000000")

  '(region :background "#282222")
  '(xref-match :foreground "#000000" :background "#2b955d")

  '(highlight :background "#ff79c6" :foreground "#000000")

  '(company-tooltip :background "#101010")
  '(company-tooltip-common-selection :background "#ff79c6" :foreground "#000000")
  '(company-tooltip-selection :background "#ff79c6" :foreground "#000000")

  )

(global-set-key (kbd "s-N") 'flash-active-buffer)
(make-face 'flash-active-buffer-face)
(set-face-attribute 'flash-active-buffer-face nil
                    :background "#151515")
(defun flash-active-buffer ()
  (interactive)
  (run-at-time "100 millisec" nil
               (lambda (remap-cookie)
                 (face-remap-remove-relative remap-cookie))
               (face-remap-add-relative 'default 'flash-active-buffer-face)))

(setq window-divider-default-bottom-width 0)

(use-package! tree-sitter
  :defer t
  :config
  (require 'tree-sitter-langs)
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
#+END_SRC

* pulsar
#+BEGIN_SRC emacs-lisp
;; pulsar

(use-package! pulsar
  :config
  (setq pulsar-pulse nil)
  (setq pulsar-delay 0.1)
  (setq pulsar-iterations 1)
  (setq pulsar-face 'pulsar-magenta)
  (setq pulsar-highlight-face 'pulsar-yellow)

  (pulsar-global-mode 1))
#+END_SRC

* git-gutter-fringe
#+BEGIN_SRC emacs-lisp
(after! git-gutter-fringe
  (set-face-foreground 'git-gutter-fr:modified  "purple")
  (add-to-list 'git-gutter:update-hooks 'after-save-hook)
  
  (fringe-helper-define 'git-gutter-fr:deleted nil
    "........"
    "........"
    "........"
    "........"
    "........"
    "........"
    "........"
    "........"
    "........"
    "........"
    "........"
    "........"
    "........"
    "........"
    "........"
    "........"
    "........"
    "XXXXXXXX"
    "XXXXXXXX"
    "XXXXXXXX"
    "XXXXXXXX"))
#+END_SRC

* evil
#+BEGIN_SRC emacs-lisp
;; evil
(setq evil-insert-state-map (make-sparse-keymap))
(define-key evil-insert-state-map (kbd "<escape>") 'evil-normal-state)
#+END_SRC

* persp-mode
#+BEGIN_SRC emacs-lisp
(after! persp-mode
                                        ; magit restore fix with persp-mode.el
  (persp-def-buffer-save/load
   :save-vars '(default-directory)
   :load-function #'(lambda (savelist &rest _)
                      (cl-destructuring-bind (buffer-name vars-list &rest _rest) (cdr savelist)
                        (let ((buf-dir (alist-get 'default-directory vars-list)))
                          (magit-status buf-dir))))))
#+END_SRC

* lsp/flymake
#+BEGIN_SRC emacs-lisp
;; lsp/flycheck

(use-package! breadcrumb
  :ensure t
  :config
  (breadcrumb-mode t))

(after! corfu
  (setq corfu-auto-delay 0 corfu-auto-prefix 1)
  (map! :map corfu-mode-map
        :i "H-@" #'completion-at-point
        :i "H-SPC" #'completion-at-point
        :i "C-SPC" #'set-mark-command
        :n "C-SPC" #'set-mark-command
        (:prefix "C-x"
         :i "C-k" #'cape-dict
         :i "C-f" #'cape-file
         :i "s" #'cape-ispell
         :i "C-n" #'cape-keyword
         :i "C-s" #'dabbrev-completion))
  )

(setq gc-cons-threshold (* 100 1024 1024))

;; (setq auto-save-default nil)
;; (setq make-backup-files nil)
;; (setq create-lockfiles nil)

(use-package flymake-ruff
  :defer t
  :ensure t
  :hook
  (eglot-managed-mode . flymake-ruff-load))

(map! :leader "[" #'flymake-goto-prev-error)
(map! :leader "]" #'flymake-goto-next-error)
#+END_SRC

* ruff
#+BEGIN_SRC emacs-lisp
;; ruff
(use-package lazy-ruff
  :defer t
  :hook (python-mode . lazy-ruff-mode)
  :config
  (after! python
    (map! :map python-mode-map
          "C-c f" 'lazy-ruff-lint-format-buffer)
    )
  (defun lazy-ruff-lint-format-buffer ()
    "Format the current Python buffer using `ruff` before saving."
    (interactive)
    (let ((initial-line (line-number-at-pos))
          (initial-column (current-column)))
      (unless (derived-mode-p 'python-mode 'python-base-mode)
        (user-error "Only python buffers can be linted with ruff"))
      (let ((temp-file (make-temp-file "ruff-tmp" nil ".py")))
        ;; Write buffer to temporary file, format it, and replace buffer contents.
        (write-region nil nil temp-file)
        (if lazy-ruff-only-format-buffer
            (shell-command-to-string (format "%s %s" lazy-ruff-format-command temp-file))
          (shell-command-to-string (format "%s %s" lazy-ruff-check-command temp-file))
          (shell-command-to-string (format "%s %s" lazy-ruff-format-command temp-file)))
        (erase-buffer)
        (insert-file-contents temp-file)
        ;; Clean up temporary file.
        (delete-file temp-file))
      (forward-line (1- initial-line))
      (move-to-column initial-column)
      )
    )
  )
#+END_SRC

* dart
#+BEGIN_SRC emacs-lisp
;; dart
(use-package! dart-mode
  :defer t
  :bind (:map dart-mode-map
              ("C-M-x" . #'flutter-run-or-hot-reload)))
#+END_SRC

* prettier-js
#+BEGIN_SRC emacs-lisp
(add-hook 'js-mode-hook #'prettier-js-mode)
(add-hook 'typescript-mode-hook #'prettier-js-mode)
#+END_SRC

* dap-mode
#+BEGIN_SRC emacs-lisp
;; dap-mode
(after! dap-mode
  (require 'dap-gdb-lldb)
  (dap-gdb-lldb-setup)
  (setq dap-output-buffer-filter '("stdout"))
  (map! :leader "d d" #'dap-debug)
  (map! :leader "d b" #'dap-breakpoint-toggle)
  (map! :leader "d h" #'dap-hydra))
#+END_SRC

* go-mode
#+BEGIN_SRC emacs-lisp
;; go-mode
(after! go-mode
  (add-hook 'before-save-hook 'gofmt-before-save))
#+END_SRC

* company
#+BEGIN_SRC emacs-lisp
;; company
(after! company
  (setq company-idle-delay 0.05)
  (setq company-minimum-prefix-length 2)
  (define-key company-mode-map (kbd "H-SPC") 'company-complete)
  (define-key company-active-map (kbd "<backtab>") 'counsel-company))
#+END_SRC

* treemacs
#+BEGIN_SRC emacs-lisp
;; treemacs
(after! treemacs
  (treemacs-project-follow-mode 1)
  (treemacs-follow-mode 1)
  ;; (treemacs-tag-follow-mode 1)
  (map! :leader "o s" #'lsp-treemacs-symbols)
  (setq treemacs-is-never-other-window nil)
  )
;; lsp-treemacs
#+END_SRC

* meson-mode
#+BEGIN_SRC emacs-lisp
;; meson-mode
(use-package! meson-mode
  :defer t
  :mode "\\.build\\'"
  )
#+END_SRC

* smartparens
#+BEGIN_SRC emacs-lisp
;; smartparens
(after! smartparens
  (define-key smartparens-mode-map (kbd "M-<backspace>") 'sp-backward-unwrap-sexp))
#+END_SRC

* leetcode
#+BEGIN_SRC emacs-lisp
;; leetcode
(use-package! leetcode
  :defer t
  :config
  (add-hook 'leetcode-solution-mode-hook
          (lambda() (copilot-mode -1)))
  (setq leetcode-save-solutions t)
  (setq leetcode-directory "~/leetcode")
  (setq leetcode-prefer-language "python3"))
#+END_SRC

* multiple cursors
#+BEGIN_SRC emacs-lisp
;; multiple-cursors
(blink-cursor-mode 1)
(use-package! multiple-cursors
  :defer t
  :bind
  (("H-."  . 'mc/mark-next-like-this)
   ("H-,"  . 'mc/mark-previous-like-this)
   ("C-\"" . 'mc/mark-all-like-this)

   :map mc/keymap
   ("H->"     . 'mc/skip-to-next-like-this)
   ("H-<"     . 'mc/skip-to-previous-like-this)
   ("H-x C-." . 'mc/unmark-next-like-this)
   ("H-x C-," . 'mc/unmark-previous-like-this)
   ("H-x C-:" . 'mc/mark-pop)
   ("M-["     . 'mc/insert-numbers)
   ("M-]"     . 'mc/insert-letters)
   ("C-x C-a" . 'mc/vertical-align-with-space)))
#+END_SRC

* buffermove
#+BEGIN_SRC emacs-lisp
;; buffermove
(use-package! buffer-move
  :bind (("H-K" . buf-move-up)
         ("H-J" . buf-move-down)
         ("H-H" . buf-move-left)
         ("H-L" . buf-move-right)))
#+END_SRC

* dired
#+BEGIN_SRC emacs-lisp
;; dired
(after! dired-x
  (defun dired-open-in-external-app ()
    "Open the file(s) at point with an external application."
    (interactive)
    (let ((file-list (dired-get-marked-files)))
      (mapc
       (lambda (file-path)
         ;; (let ((process-connection-type nil))
         ;;   (start-process "" nil "gio" "open" file-path))
         ;; (start-process "" nil "gio" "open" file-path)
         (call-process "gio" nil 0 nil "open" file-path)
         (message file-path))
       file-list)))

  (define-key dired-mode-map (kbd "M-o")
    (lambda () (interactive) (dired-open-in-external-app))))

(add-hook 'dired-mode-hook
          (lambda ()
            (dired-hide-details-mode)))
#+END_SRC

* copilot
#+BEGIN_SRC emacs-lisp
;; copilot
(defun my-tab ()
  (interactive)
  (or (copilot-accept-completion)
      (company-indent-or-complete-common nil)))

(use-package! copilot
  :defer t
  :hook
  (prog-mode . copilot-mode)
  (org-mode . copilot-mode)
  :bind (("S-<tab>" . 'copilot-accept-completion-by-word)
         ("S-<return>" . 'copilot-accept-completion)
         :map copilot-completion-map
         ("M-n" . 'copilot-next-completion)
         ("M-p" . 'copilot-previous-completion)
         ;; ("TAB" . 'my-tab)
         ("S-<return>" . 'copilot-accept-completion)
         ("C-<tab>" . 'copilot-accept-completion-by-word)
         ("H-<tab>" . 'copilot-accept-completion-by-line)
         )
        (:map copilot-mode-map
         ("S-<tab>" . 'copilot-accept-completion-by-word)
         ))
#+END_SRC

* gptel
#+BEGIN_SRC emacs-lisp
;; gptel

(use-package! gptel
 :defer t
 :config
 (global-set-key (kbd "C-c c g") 'gptel-menu)
 (global-set-key (kbd "C-c c c") 'gptel)
 (setq gptel-default-mode 'org-mode))
#+END_SRC

* magit
#+BEGIN_SRC emacs-lisp
(after! magit
  (setq transient-display-buffer-action '(display-buffer-in-side-window (side . bottom))))
#+END_SRC

* window-rules
#+BEGIN_SRC emacs-lisp
;; window-rules

(setq switch-to-buffer-obey-display-actions t)
(setq-default switch-to-buffer-in-dedicated-window 'pop)

(setq
 display-buffer-alist
 `(
   ("\\*Buffer List\\*"
    (display-buffer-reuse-window display-buffer-in-side-window)
    (side . bottom) (slot . 1) (preserve-size . (nil . t)) (window-height . 0.15) (dedicated . t))

   ("\\*\\(?:Tag List\\)\\*\\|^*julia" display-buffer-in-side-window
    (side . right) (slot . 0) (window-width . 0.2) (dedicated . t)
    (preserve-size . (t . nil)))

   ("^magit:\\|^magit-diff" display-buffer-in-side-window
    (side . left) (slot . 3) (window-width . 0.2) (dedicated . t)
    (preserve-size . (t . nil)))

   ("COMMIT_EDITMSG" display-buffer-in-side-window
    (side . left) (slot . 2) (window-width . 0.2) (dedicated . t)
    (preserve-size . (t . nil)))
   ("\\*\\(?:help\\|grep\\|Completions\\|org-python-session\\|Python\\)\\*\\|^*leetcode\\|^*compilation\\|^*Flutter\\|^*pytest\\|^*docker-build-output\\|^*ein\\|^*MATLAB\\|^* docker container" display-buffer-in-side-window
    (side . top) (slot . 4) (preserve-size . (t . nil)) (window-height . 0.15) (dedicated . t))

   ("\\*\\(?:shell\\|vterm\\)\\*" display-buffer-in-side-window
    (side . top) (slot . 5) (preserve-size . (nil . t)) (window-height . 0.15) (dedicated . t))

   )
 )

(map! :leader "w x" #'window-toggle-side-windows)

(add-hook 'ediff-before-setup-hook (lambda () (select-frame (make-frame))))
#+END_SRC

* vterm
#+BEGIN_SRC emacs-lisp
;; vterm
(defun projectile-vterm ()
  (interactive)
  ;; (if (projectile-project-p)
  ;; if projectile-project-p is not nil and not dired-mode
  (if (and (projectile-project-p) (not (eq major-mode 'dired-mode)))
      (let* ((project (projectile-project-root)))
        (unless (require 'vterm nil 'noerror)
          (error "Package 'vterm' is not available"))
        (projectile-with-default-dir project
          (vterm "*vterm*")))
    (unless (require 'vterm nil 'noerror)
      (error "Package 'vterm' is not available"))
    (vterm "*vterm*")))

(map! "M-V" #'projectile-vterm)

(use-package! vterm
  :init
  (setq vterm-shell "zsh")
  (setq vterm-buffer-name-string "*vterm %s*"))
#+END_SRC

* org
#+BEGIN_SRC emacs-lisp
;; org

(after! org
  (map! :map org-mode-map :n "g k" #'org-up-element)
  (map! :map org-mode-map :n "g j" #'org-down-element)
  (map! :map org-mode-map :leader "j s" 'jupyter-org-insert-src-block)
  (map! :map org-mode-map :leader "j c" 'jupyter-org-clone-block)


  (setq org-agenda-files '("~/Dropbox/agenda.org"))
  (setq org-latex-hyperref-template nil)
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-toc-command "\\tableofcontents \\clearpage")
  (setq org-latex-listings 'minted)
  (setq org-latex-minted-options
        '(("breaklines" "true")
          ("breakanywhere" "true")
          ("linenos" "true")
          ("gobble" "-8")
          ("xleftmargin" "10pt")
          ("bgcolor" "borlandbg")))

  (setq org-latex-pdf-process '("latexmk -pdflatex=xelatex -shell-escape -pdf %f"))
  ;; (setq org-latex-pdf-process '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  ;; (setq org-latex-pdf-process '("xetex -shell-escape -interaction nonstopmode %f"))


  (after! ox-latex
    (add-to-list 'org-latex-classes
                 '("extarticle"
                   "\\documentclass{extarticle}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

  ;; (setq org-src-fontify-natively t)
  )

(setq org-journal-date-format "%a, %Y %b %d")

;; (org-babel-do-load-languages
;;  'org-babel-load-languages
;;  '((emacs-lisp . t)
;;    (python . t)
;;    (jupyter . t)))

(use-package! olivetti
  :defer t
  :hook (org-mode . olivetti-mode))

#+END_SRC

* custom conf
#+BEGIN_SRC emacs-lisp
;; custom binds
(setq delete-by-moving-to-trash t)
(setq-default comment-line-break-function nil)

(global-set-key (kbd "H-M-J") (lambda()
                              (interactive)
                              (display-buffer-in-side-window (get-buffer (buffer-name)) '((side . top) (slot . -1) (window-height . 0.15)))))
(global-set-key (kbd "H-M-K") (lambda()
                              (interactive)
                              (display-buffer-in-side-window (get-buffer (buffer-name)) '((side . top) (slot . 1) (window-height . 0.15)))))
(global-set-key (kbd "H-M-L") (lambda()
                              (interactive)
                              (display-buffer-in-side-window (get-buffer (buffer-name)) '((side . right) (slot . 1) (window-width . 0.35)))))
(global-set-key (kbd "H-M-H") (lambda()
                              (interactive)
                              (display-buffer-in-side-window (get-buffer (buffer-name)) '((side . left) (slot . 1) (window-width . 0.2)))))

(defun open-nautilus ()
  (interactive)
  (call-process "nautilus" nil 0 nil "."))

(map! "C-c C-n" #'open-nautilus)

(defun open-term ()
  "Lists the contents of the current directory."
  (interactive)
  (call-process "st" nil 0 nil))

(defun open-terminal-in-project-root ()
  "Open default terminal in the project root."
  (interactive)
  (if (projectile-project-p)
      (let ((default-directory (projectile-project-root)))
        (open-term))
    (open-term)))
(map! "H-<return>" 'open-terminal-in-project-root)

(map! :i
      "C-?" #'undo-fu-only-redo)

(map! :i
      "C-M-/" #'undo-fu-only-redo-all)

(global-set-key (kbd "H-d") (lambda ()
                              (interactive)
                              (scroll-up 4)
                              (setq this-command 'next-line)
                              (forward-line 4)))
(global-set-key (kbd "H-u") (lambda ()
                              (interactive)
                              (scroll-down 4)
                              (setq this-command 'previous-line)
                              (forward-line -4)))

(defun switch-to-previous-buffer ()
  (interactive)
  (switch-to-buffer (other-buffer)))
(global-set-key (kbd "H-<tab>") 'switch-to-previous-buffer)

(defun my-make-room-for-new-compilation-buffer ()
  "Renames existing *compilation* buffer to something unique so
         that a new compilation job can be run."
  (interactive)
  (let ((cbuf (get-buffer (concat "*compilation*<" (projectile-project-name) ">")))
        (more-cbufs t)
        (n 1)
        (new-cbuf-name ""))
    (when cbuf
      (while more-cbufs
        (setq new-cbuf-name (concat (format "*compilation %d*<" n) compile-command " " (projectile-project-name) ">"))
        (setq n (1+ n))
        (setq more-cbufs (get-buffer new-cbuf-name)))
      (with-current-buffer cbuf
        (rename-buffer new-cbuf-name)))))

(map! :leader "c n" #'my-make-room-for-new-compilation-buffer)
#+END_SRC

* workspaces
#+BEGIN_SRC emacs-lisp
;; workspaces
(defun +workspace-switch (name &optional auto-create-p)
  "Switch to another workspace named NAME (a string).

If AUTO-CREATE-P is non-nil, create the workspace if it doesn't exist, otherwise
throws an error."
  (unless (+workspace-exists-p name)
    (if auto-create-p
        (+workspace-new name)
      (error "%s is not an available workspace" name)))
  (let ((old-name (+workspace-current-name)))
    (unless (equal old-name name)
      (setq +workspace--last
            (or (and (not (string= old-name persp-nil-name))
                     old-name)
                +workspaces-main))
      (unless (+workspace-exists-p "main")
        (+workspace-new "main"))
      (persp-switch "main")
      (persp-frame-switch name))
    (equal (+workspace-current-name) name)))
#+END_SRC

* remapping
#+BEGIN_SRC emacs-lisp
;; remaping

;; windows
(global-set-key (kbd "H-h") 'windmove-left)
(global-set-key (kbd "H-l") 'windmove-right)
(global-set-key (kbd "H-k") 'windmove-up)
(global-set-key (kbd "H-j") 'windmove-down)

(global-set-key (kbd "H-M-h") '(lambda () (interactive) (shrink-window-horizontally 10)))
(global-set-key (kbd "H-M-l") '(lambda () (interactive) (enlarge-window-horizontally 10)))
(global-set-key (kbd "H-M-j") '(lambda () (interactive) (shrink-window 10)))
(global-set-key (kbd "H-M-k") '(lambda () (interactive) (enlarge-window 10)))

(global-set-key (kbd "H-/") 'winner-undo)
(global-set-key (kbd "H-?") 'winner-redo)

;; Pull from PRIMARY (same as middle mouse click)
(defun get-primary ()
  (interactive)
  (insert
   (gui-get-primary-selection)))

(map! :n "*p" 'get-primary)

;; open file externally
(map! :leader "f o" #'counsel-find-file-extern)

;; workspaces
(map! :leader "TAB TAB" #'+workspace/other)
(map! :leader "TAB '" #'+workspace/display)

;; tangling
(map! :leader "m b t" #'org-babel-tangle)
(map! :leader "m b T" #'org-babel-tangle-file)
(map! :leader "m b d" #'org-babel-detangle)
#+END_SRC
